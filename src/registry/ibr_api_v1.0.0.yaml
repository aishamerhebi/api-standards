openapi: 3.0.3
info:
  title: Interoperability APIs - Integrated Beneficiary Registry
  x-logo:
    url: './dci-logo.png'
    backgroundColor: '#FFFFFF'
    altText: 'Digital Convergence Initiative'  
  description: |-
    The IBR(Integrated Beneficiary Registry) interoperability APIs describes different APIs some of them are usecase specific and other are generalized APIs to perform interoperable operations between IBR registry and SP-MIS.
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in upcoming version.

    1. Search: The Search API provides functionality to search based on demographic, identifiers and custom query
    2. Event subscription: The Event subscription APIs describe APIs useful to subscribe / unsubscribe events. When any event happens in crvs registry it sends event details on notify end point
    3. Request status check: The request status checking APIs implement to check status of request sent in any above APIs
    
    Gitbook reference link[WIP]:
    - [Integrated Beneficiary Registry - V1.0 ](https://standards.spdci.io)

    Code directory links:
    - [Identifiers](https://standards.spdci.org/standards/standards-for-interoperability-interfaces/common-standards-for-interoperability-interfaces/data/code-directory/cd.com.01-identifier_type)
    - [Marital Status](https://standards.spdci.org/standards/standards-for-interoperability-interfaces/common-standards-for-interoperability-interfaces/data/code-directory/cd.com.02-marital_status)
    - [Sex](https://standards.spdci.org/standards/standards-for-interoperability-interfaces/common-standards-for-interoperability-interfaces/data/code-directory/cd.com.03-sex)
    - [Vital event types](https://standards.spdci.org/standards/standards-for-interoperability-interfaces/common-standards-for-interoperability-interfaces/data/code-directory/cd.com.04-vital_event)   

    Data Objects:
    - Person (WIP)
    - HouseHold (WIP)


    Each request is build up of three parts 
    - signature 
    - header 
    - message

    Information about each part is given below

    **Signature:**
    - The signature is used to verify the integrity of the message.
    - The signature is a hash of the message and is encrypted using the private key of the sender.
    - The receiver can verify the signature using the public key of the sender.

    **Header:**
    - The header contains information about various message header, refer to the header schema for more details.

    **Message:**

    - The message contains the actual payload of the message.
    - Refere example section to get sample data and also read Gitbook for details data objects
    - The receiver can decrypt the message using the private key of the "err.receiver_id.invalid"

  version: 1.0.0
  contact:
    name: DCI Social Protection
    email: info@spdci.org
  license:
   name: DCI Social Protection License
   url: https://api.spdci.org/LICENSE.md
 
servers:
  - url: "https://sandbox.spdci.org/namespace/v1.0.0"
    description: Sandbox Server
tags: 
  - name: Async
    description: Async endpoints
  - name: Sync 
    description: Sync endpoints
  - name: Schemas
    description: Schemas
  - name: Status Codes
    description: Status Codes
  - name: SearchRequest
    x-displayName: SearchRequest
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/SearchRequest" />    
  - name: SearchResponse
    x-displayName: SearchResponse
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/SearchResponse" />  
  - name: SearchStatusReasonCode
    x-displayName: SearchStatusReasonCode
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/SearchStatusReasonCode" />        
  - name: SubscribeRequest
    x-displayName: SubscribeRequest
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/SubscribeRequest" />    
  - name: SubscribeResponse
    x-displayName: SubscribeResponse
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/SubscribeResponse" />    
  - name: SubscribeStatusReasonCode
    x-displayName: SubscribeStatusReasonCode
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/SubscribeStatusReasonCode" />        
  - name: NotifyEventRequest
    x-displayName: NotifyEventRequest
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/NotifyEventRequest" />    
  - name: UnSubscribeRequest
    x-displayName: UnSubscribeRequest
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/UnSubscribeRequest" />    
  - name: UnSubscribeResponse
    x-displayName: UnSubscribeResponse
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/UnSubscribeResponse" />  
  - name: UnSubscribeStatusReasonCode
    x-displayName: UnSubscribeStatusReasonCode
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/UnSubscribeStatusReasonCode" />        
  - name: TxnStatusRequest
    x-displayName: TxnStatusRequest
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/TxnStatusRequest" />    
  - name: TxnStatusResponse
    x-displayName: TxnStatusResponse
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/TxnStatusResponse" />    
  - name: ReceiptRequest
    x-displayName: ReceiptRequest
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/ReceiptRequest" />    
  - name: ReceiptResponse
    x-displayName: ReceiptResponse
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/ReceiptResponse" />    
  - name: EncryptedMessage
    x-displayName: EncryptedMessage
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/EncryptedMessage" />    

x-tagGroups:
  - name: API Definitions
    tags:
      - Async
      - Sync
  - name: Schema Objects
    tags:
      - SearchRequest
      - SearchResponse
      - SubscribeRequest 
      - SubscribeResponse
      - ReceiptRequest
      - ReceiptResponse
      - TxnStatusRequest
      - TxnStatusResponse
      - NotifyEventRequest
      - UnSubscribeRequest
      - UnSubscribeResponse 
      - EncryptedMessage
  - name: Status Codes
    tags: 
      - SearchStatusReasonCode
paths:
 /registry/search:
  post: 
    summary: "/registry/search"
    description: |-
      The async search api will accept request and will send response to on-search endpoint. The IBR will implement /registry/search endpoint and the SP-MIS shall implement /registry/on-search to receive data from IBR.
      The search request message consist of reg_event_type, query_type, query, sort, pagination, consent, authorize, locale. The IBR will validate the request and will send response to on-search endpoint. 
      Information for each field is given below.
        - reg_event_type: The event type for which search to be performed, this can be any of event type explained in RegistryEventType.yaml
        - query_type: The query type on which registry to determene type of search process, this can be any of query type explained in QueryType.yaml
        - query: The query will indicate payload of data which to be seached in registry, this can be any of explained in RegistryQueries.yaml

    operationId: post_reg_search
    tags: 
      -  Async
    requestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
              type: object
              properties:
                signature:  
                  $ref: "#/components/schemas/MsgSignature"
                header:
                  allOf:
                    - $ref: "#/components/schemas/MsgHeader_V1.0.0"
                    - properties:
                        action:
                          enum:
                            - search
                message:
                  type: object
                  description: The search data using which registry search to be performed
                  oneOf:
                    - $ref: "#/components/schemas/SearchRequest"
                    - $ref: "#/components/schemas/EncryptedMessage"
              required:
                - header
                - message
        multipart/form-data:
          schema:
            allOf:
              - $ref: "#/components/schemas/FileInfo"
              - properties:
                  action:
                    enum:
                      - search
    responses:
        default:
          $ref: "#/components/responses/Response"
        '401':
          $ref: "#/components/responses/HttpErrorResponse"
        '403':
          $ref: "#/components/responses/HttpErrorResponse"
        '500':
          $ref: "#/components/responses/HttpErrorResponse"
    security:
      - Authorization: [ ]
    deprecated: false
 /registry/on-search:
  post: 
    summary: "/registry/on-search"
    description: |-
      The /registry/on-search end point tobe implemented by SP-MIS to receive search results from IBR. 
      The IBR will send data in format explained in SearchResponse.yaml. The reg_records will containe data that in explained in ibr/v1/Person.jsonld. 
      Refer example json at github [link](https://app.gitbook.com/o/0iSqNDBWH70sLmGExne0/s/bUVnrLEoih8bOGfpNjnB/1.-crvs/data/data-objects/person#example)
    operationId: post_reg_on-search
    tags: 
      -  Async
    requestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
              type: object
              properties:
                signature:  
                  $ref: "#/components/schemas/MsgSignature"
                header:
                  allOf:
                    - $ref: "#/components/schemas/MsgCallbackHeader_V1.0.0"
                    - properties:
                        action:
                          enum:
                            - on-search
                message:
                  type: object
                  oneOf:
                    - $ref: '#/components/schemas/SearchResponse'
                    - $ref: '#/components/schemas/EncryptedMessage'
              required:
                - header
        multipart/form-data:
          schema:
            allOf:
              - $ref: "#/components/schemas/FileInfo"
              - properties:
                  action:
                    enum:
                      - on-search
    responses:
        default:
          $ref: "#/components/responses/Response"
        '401':
          $ref: "#/components/responses/HttpErrorResponse"
        '403':
          $ref: "#/components/responses/HttpErrorResponse"
        '500':
          $ref: "#/components/responses/HttpErrorResponse"
    security:
      - Authorization: [ ]
    deprecated: false

 /registry/subscribe:
  post: 
    summary: "/registry/subscribe"
    description: |-
      The /registry/subscribe end point tobe implemented by IBR to receive subscription request from SP-MIS.
      The subscription request contain event type, frequency and query information, based on that resistry will send notification to subscriber.
    operationId: post_reg_subscribe
    tags: 
      -  Async
    requestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
              type: object
              properties:
                signature:  
                  $ref: "#/components/schemas/MsgSignature"
                header:
                  allOf:
                    - $ref: "#/components/schemas/MsgHeader_V1.0.0"
                    - properties:
                        action:
                          enum:
                            - subscribe
                message:
                  type: object
                  description: Subscription request which contaion query with frequency and other info on which notification to be sent by registry to subscriber, The IBR supports benefit_disbusrement,programme_exited events as of now
                  oneOf:
                    - $ref: "#/components/schemas/SubscribeRequest"
                    - $ref: "#/components/schemas/EncryptedMessage"
              required:
                - header
                - message
        multipart/form-data:
          schema:
            allOf:
              - $ref: "#/components/schemas/FileInfo"
              - properties:
                  action:
                    enum:
                      - subscribe
    responses:
        default:
          $ref: "#/components/responses/Response"
        '401':
          $ref: "#/components/responses/HttpErrorResponse"
        '403':
          $ref: "#/components/responses/HttpErrorResponse"
        '500':
          $ref: "#/components/responses/HttpErrorResponse"
    security:
      - Authorization: [ ]
    deprecated: false
 /registry/on-subscribe:
  post: 
    summary: "/registry/on-subscribe"
    description: |-
      The /registry/on-subscribe request tobe implemented by SP-MIS to receive subscription response from IBR. 
      The response with contain subscription code which to be used to unsubscribe the subscription or to track subscription details.
    operationId: post_reg_on-subscribe
    tags: 
      -  Async
    requestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
              type: object
              properties:
                signature:  
                  $ref: "#/components/schemas/MsgSignature"
                header:
                  allOf:
                    - $ref: "#/components/schemas/MsgHeader_V1.0.0"
                    - properties:
                        action:
                          enum:
                            - on-subscribe
                message:
                  type: object
                  description: Subscription information 
                  oneOf:
                    - $ref: "#/components/schemas/SubscribeResponse"
                    - $ref: "#/components/schemas/EncryptedMessage"
              required:
                - header
                - message
        multipart/form-data:
          schema:
            allOf:
              - $ref: "#/components/schemas/FileInfo"
              - properties:
                  action:
                    enum:
                      - on-subscribe
    responses:
        default:
          $ref: "#/components/responses/Response"
        '401':
          $ref: "#/components/responses/HttpErrorResponse"
        '403':
          $ref: "#/components/responses/HttpErrorResponse"
        '500':
          $ref: "#/components/responses/HttpErrorResponse"
    security:
      - Authorization: [ ]
    deprecated: false

 /registry/unsubscribe:
  post: 
    summary: "/registry/unsubscribe"
    description: |-
      The /registry/unsubscribe endpoint will be implemented by IBR, SP-MIS can send request to unsubscribe existing subscription(s) by subscription_code(s).
    operationId: post_reg_unsubscribe
    tags: 
      -  Async
    requestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
              type: object
              properties:
                signature:  
                  $ref: "#/components/schemas/MsgSignature"
                header:
                  allOf:
                    - $ref: "#/components/schemas/MsgHeader_V1.0.0"
                    - properties:
                        action:
                          enum:
                            - unsubscribe
                message:
                  type: object
                  description: The unsubscribe request that contain subscription ids which to be removed from subscription list 
                  oneOf:
                    - $ref: "#/components/schemas/UnSubscribeRequest"
                    - $ref: "#/components/schemas/EncryptedMessage"
              required:
                - header
                - message
        multipart/form-data:
          schema:
            allOf:
              - $ref: "#/components/schemas/FileInfo"
              - properties:
                  action:
                    enum:
                      - unsubscribe
    responses:
        default:
          $ref: "#/components/responses/Response"
        '401':
          $ref: "#/components/responses/HttpErrorResponse"
        '403':
          $ref: "#/components/responses/HttpErrorResponse"
        '500':
          $ref: "#/components/responses/HttpErrorResponse"
    security:
      - Authorization: [ ]
    deprecated: false
 /registry/on-unsubscribe:
  post: 
    summary: "/registry/on-unsubscribe"
    description: |-
      The /registry/on-unsubscribe will be implemented by SP-MIS to receive unsubscribe response from IBR. It will contain status information of unsubscribe request.
    operationId: post_reg_on-unsubscribe
    tags: 
      -  Async
    requestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
              type: object
              properties:
                signature:  
                  $ref: "#/components/schemas/MsgSignature"
                header:
                  allOf:
                    - $ref: "#/components/schemas/MsgHeader_V1.0.0"
                    - properties:
                        action:
                          enum:
                            - on-unsubscribe
                message:
                  type: object
                  oneOf:
                    - $ref: "#/components/schemas/UnSubscribeResponse"
                    - $ref: "#/components/schemas/EncryptedMessage"
              required:
                - header
                - message
        multipart/form-data:
          schema:
            allOf:
              - $ref: "#/components/schemas/FileInfo"
              - properties:
                  action:
                    enum:
                      - on-unsubscribe
    responses:
        default:
          $ref: "#/components/responses/Response"
        '401':
          $ref: "#/components/responses/HttpErrorResponse"
        '403':
          $ref: "#/components/responses/HttpErrorResponse"
        '500':
          $ref: "#/components/responses/HttpErrorResponse"
    security:
      - Authorization: [ ]
    deprecated: false
 /registry/notify:
  post: 
    summary: "/registry/notify"
    description: |-
      The /registry/notify end point will be implemented by SP-MIS to receive notification for subscribed event.
      The notification will be sent based on subscription criteria.
    operationId: post_reg_notify
    tags: 
      -  Async
    requestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
              type: object
              properties:
                signature:  
                  $ref: "#/components/schemas/MsgSignature"
                header:
                  allOf:
                    - $ref: "#/components/schemas/MsgCallbackHeader_V1.0.0"
                    - properties:
                        action:
                          enum:
                            - notify
                message:
                  type: object
                  oneOf:
                    - $ref: '#/components/schemas/NotifyEventRequest'
                    - $ref: '#/components/schemas/EncryptedMessage'
              required:
                - header
        multipart/form-data:
          schema:
            allOf:
              - $ref: "#/components/schemas/FileInfo"
              - properties:
                  action:
                    enum:
                      - notify
    responses:
        default:
          $ref: "#/components/responses/HttpErrorResponse"
        '401':
          $ref: "#/components/responses/HttpErrorResponse"
        '403':
          $ref: "#/components/responses/HttpErrorResponse"
        '500':
          $ref: "#/components/responses/HttpErrorResponse"
    security:
      - Authorization: [ ]
    deprecated: false
 /registry/on-notify:
  post: 
    summary: "/registry/on-notify"
    description: |-
      The /registry/on-notify will be implemented by IBR to receive notification response from SP-MIS.
    operationId: post_reg_on_notify
    tags: 
      -  Async
    requestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
              type: object
              properties:
                signature:  
                  $ref: "#/components/schemas/MsgSignature"
                header:
                  allOf:
                    - $ref: "#/components/schemas/MsgCallbackHeader_V1.0.0"
                    - properties:
                        action:
                          enum:
                            - notify
                message:
                  type: object
                  oneOf:
                    - $ref: '#/components/schemas/ReceiptResponse'
                    - $ref: '#/components/schemas/EncryptedMessage'
              required:
                - header
        multipart/form-data:
          schema:
            allOf:
              - $ref: "#/components/schemas/FileInfo"
              - properties:
                  action:
                    enum:
                      - notify
    responses:
        default:
          $ref: "#/components/responses/Response"
        '401':
          $ref: "#/components/responses/HttpErrorResponse"
        '403':
          $ref: "#/components/responses/HttpErrorResponse"
        '500':
          $ref: "#/components/responses/HttpErrorResponse"
    security:
      - Authorization: [ ]
    deprecated: false

 /registry/txn/status:
  post: 
    summary: "/registry/txn/status"
    description: |-
      The /registry/txn/status will be implemented by IBR. This will check status of reach request using transaction_id and/or reference_id(s).
    operationId: post_reg_txnstatus
    tags: 
      -  Async
    requestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
              type: object
              properties:
                signature:  
                  $ref: "#/components/schemas/MsgSignature"
                header:
                  allOf:
                    - $ref: "#/components/schemas/MsgHeader_V1.0.0"
                    - properties:
                        action:
                          enum:
                            - txn-status
                message:
                  type: object
                  oneOf:
                    - $ref: '#/components/schemas/TxnStatusRequest'
                    - $ref: '#/components/schemas/EncryptedMessage'
              required:
                - header
                - message
        multipart/form-data:
          schema:
            allOf:
              - $ref: "#/components/schemas/FileInfo"
              - properties:
                  action:
                    enum:
                      - txn-status
    responses:
        default:
          $ref: "#/components/responses/Response"
        '401':
          $ref: "#/components/responses/HttpErrorResponse"
        '403':
          $ref: "#/components/responses/HttpErrorResponse"
        '500':
          $ref: "#/components/responses/HttpErrorResponse"
    security:
      - Authorization: [ ]
    deprecated: false
 /registry/txn/on-status:
  post: 
    summary: "/registry/txn/on-status"
    description: |-
      The /registry/txn/on-status will be implemented by SP-MIS. The response with information about request and in some case it may contain data as well.
    operationId: post_reg_on-txnstatus
    tags: 
      -  Async
    requestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
              type: object
              properties:
                signature:  
                  $ref: "#/components/schemas/MsgSignature"
                header:
                  allOf:
                    - $ref: "#/components/schemas/MsgCallbackHeader_V1.0.0"
                    - properties:
                        action:
                          enum:
                            - txn-on-status
                message:
                  type: object
                  oneOf:
                    - $ref: '#/components/schemas/TxnStatusResponse'
                    - $ref: '#/components/schemas/EncryptedMessage'
              required:
                - header
        multipart/form-data:
          schema:
            allOf:
              - $ref: "#/components/schemas/FileInfo"
              - properties:
                  action:
                    enum:
                      - txn-on-status
    responses:
        default:
          $ref: "#/components/responses/Response"
        '401':
          $ref: "#/components/responses/HttpErrorResponse"
        '403':
          $ref: "#/components/responses/HttpErrorResponse"
        '500':
          $ref: "#/components/responses/HttpErrorResponse"
    security:
      - Authorization: [ ]
    deprecated: false

 /registry/sync/search:
  post: 
    summary: "/registry/sync/search"
    description: |- 
      The sync search api will accept request and will send response immediately
      The search request message consist of reg_event_type, query_type, query, sort, pagination, consent, authorize, locale. The IBR will validate the request and will send response to on-search endpoint. 
      Information for each field is given below.
        - reg_event_type: The event type for which search to be performed, this can be any of event type explained in RegistryEventType.yaml
        - query_type: The query type on which registry to determene type of search process, this can be any of query type explained in QueryType.yaml
        - query: The query will indicate payload of data which to be seached in registry, this can be any of explained in RegistryQueries.yaml

    operationId: post_reg_sync_search
    tags: 
      -  Sync
    requestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
              type: object
              properties:
                signature:  
                  $ref: "#/components/schemas/MsgSignature"
                header:
                  allOf:
                    - $ref: "#/components/schemas/MsgHeader_V1.0.0"
                    - properties:
                        action:
                          enum:
                            - search
                message:
                  type: object
                  description: The search data using which registry search to be performed
                  oneOf:
                    - $ref: '#/components/schemas/SearchRequest'
                    - $ref: '#/components/schemas/EncryptedMessage'
              required:
                - header
                - message
    responses:
        default:
          description: "Registry search response"
          content:
            application/json:
              schema:
                type: object
                properties:
                  signature:  
                    $ref: "#/components/schemas/MsgSignature"
                  header:
                    allOf:
                      - $ref: "#/components/schemas/MsgCallbackHeader_V1.0.0"
                      - properties:
                          action:
                            enum:
                              - on-search
                  message:
                    type: object
                    oneOf:
                      - $ref: '#/components/schemas/SearchResponse'
                      - $ref: '#/components/schemas/EncryptedMessage'
                required:
                  - header
        '401':
          $ref: "#/components/responses/HttpErrorResponse"
        '403':
          $ref: "#/components/responses/HttpErrorResponse"
        '500':
          $ref: "#/components/responses/HttpErrorResponse"
    security:
      - Authorization: [ ]
    deprecated: false
 /registry/receipts:
  post: 
    summary: "/registry/receipts"
    description: |-
      The /registry/receipts endpoint will be implemented by IBR to receive receipt request from SP-MIS system.
      The receipt_type and beneficiaries will be requied to make request. 
      Three receipt types are supported as of now, they are 
        1) Register 
        2) Payment 
        3) Deregister
      The beneficiaries will contain list of person information for which receipt to be generated.
    operationId: post_reg_receipts
    tags: 
      -  Sync
    requestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
              type: object
              properties:
                signature:  
                  $ref: "#/components/schemas/MsgSignature"
                header:
                  allOf:
                    - $ref: "#/components/schemas/MsgCallbackHeader_V1.0.0"
                    - properties:
                        action:
                          enum:
                            - notify
                message:
                  type: object
                  oneOf:
                    - $ref: '#/components/schemas/ReceiptRequest'
                    - $ref: '#/components/schemas/EncryptedMessage'
              required:
                - header
        multipart/form-data:
          schema:
            allOf:
              - $ref: "#/components/schemas/FileInfo"
              - properties:
                  action:
                    enum:
                      - notify
    responses:
        default:
          $ref: "#/components/responses/Response"
        '401':
          $ref: "#/components/responses/HttpErrorResponse"
        '403':
          $ref: "#/components/responses/HttpErrorResponse"
        '500':
          $ref: "#/components/responses/HttpErrorResponse"
    security:
      - Authorization: [ ]
    deprecated: false
 /registry/enrolled:
  post: 
    summary: "/registry/enrolled"
    description: |- 
      search programmes person is enrolled in
    operationId: post_reg_enrolled
    tags: 
      -  Sync
    requestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
              type: object
              properties:
                signature:  
                  $ref: "#/components/schemas/MsgSignature"
                header:
                  allOf:
                    - $ref: "#/components/schemas/MsgHeader_V1.0.0"
                    - properties:
                        action:
                          enum:
                            - search
                message:
                  type: object
                  description: The search data using which registry search to be performed
                  oneOf:
                    - $ref: '#/components/schemas/EnrolledRequest'
                    - $ref: "#/components/schemas/EncryptedMessage"
              required:
                - header
                - message
        multipart/form-data:
          schema:
            allOf:
              - $ref: "#/components/schemas/FileInfo"
              - properties:
                  action:
                    enum:
                      - search
    responses:
        default:
          $ref: "#/components/responses/Response"
        '401':
          $ref: "#/components/responses/HttpErrorResponse"
        '403':
          $ref: "#/components/responses/HttpErrorResponse"
        '500':
          $ref: "#/components/responses/HttpErrorResponse"
    security:
      - Authorization: [ ]
    deprecated: false
 /registry/sync/notify:
  post: 
    summary: "/registry/sync/notify"
    description: |-
      The /registry/sync/notify end point will be implemented by SP-MIS to receive notification for subscribed event.
      The notification will be sent based on subscription criteria.
    operationId: post_reg_sync_notify
    tags: 
      -  Sync
    requestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
              type: object
              properties:
                signature:  
                  $ref: "#/components/schemas/MsgSignature"
                header:
                  allOf:
                    - $ref: "#/components/schemas/MsgCallbackHeader_V1.0.0"
                    - properties:
                        action:
                          enum:
                            - notify
                message:
                  type: object
                  oneOf:
                    - $ref: '#/components/schemas/NotifyEventRequest'
                    - $ref: '#/components/schemas/EncryptedMessage'
              required:
                - header
        multipart/form-data:
          schema:
            allOf:
              - $ref: "#/components/schemas/FileInfo"
              - properties:
                  action:
                    enum:
                      - notify
    responses:
        default:
          $ref: "#/components/responses/HttpErrorResponse"
        '401':
          $ref: "#/components/responses/HttpErrorResponse"
        '403':
          $ref: "#/components/responses/HttpErrorResponse"
        '500':
          $ref: "#/components/responses/HttpErrorResponse"
    security:
      - Authorization: [ ]
    deprecated: false
 /registry/sync/txn/status:
  post: 
    summary: "/registry/sync/txn/status"
    description: |-
      The /registry/sync/txn/status will be implemented by IBR. This will check status of reach request using transaction_id and/or reference_id(s).
    operationId: post_reg_sync_txnstatus
    tags: 
      -  Sync
    requestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
              type: object
              properties:
                signature:  
                  $ref: "#/components/schemas/MsgSignature"
                header:
                  allOf:
                    - $ref: "#/components/schemas/MsgHeader_V1.0.0"
                    - properties:
                        action:
                          enum:
                            - txn-status
                message:
                  type: object
                  oneOf:
                    - $ref: '#/components/schemas/TxnStatusRequest'
                    - $ref: '#/components/schemas/EncryptedMessage'
              required:
                - header
                - message
    responses:
        default:
          description: "Transaction status check response"
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    signature:  
                      $ref: "#/components/schemas/MsgSignature"
                    header:
                      allOf:
                        - $ref: "#/components/schemas/MsgCallbackHeader_V1.0.0"
                        - properties:
                            action:
                              enum:
                                - txn-on-status
                    message:
                      type: object
                      oneOf:
                        - $ref: '#/components/schemas/TxnStatusResponse'
                        - $ref: '#/components/schemas/EncryptedMessage'
                  required:
                    - header
        '401':
          $ref: "#/components/responses/HttpErrorResponse"
        '403':
          $ref: "#/components/responses/HttpErrorResponse"
        '500':
          $ref: "#/components/responses/HttpErrorResponse"
    security:
      - Authorization: [ ]
    deprecated: false

 
components:
  schemas: 
    ReceiptRequest: 
      $ref: ibr/ReceiptRequest.yaml
    ReceiptResponse: 
      $ref: ibr/ReceiptResponse.yaml
    SearchRequest: 
      $ref: ibr/SearchRequest.yaml
    SearchResponse: 
      $ref: ibr/SearchResponse.yaml
    SearchStatusReasonCode: 
      $ref: schema/SearchStatusReasonCode.yaml
    SubscribeRequest: 
      $ref: ibr/SubscribeRequest.yaml
    SubscribeResponse: 
      $ref: ibr/SubscribeResponse.yaml
    SubscribeStatusReasonCode: 
      $ref: schema/SubscribeStatusReasonCode.yaml
    TxnStatusRequest: 
      $ref: ibr/TxnStatusRequest.yaml            
    TxnStatusResponse: 
      $ref: ibr/TxnStatusResponse.yaml  
    EnrolledRequest:
      $ref: ibr/EnrolledRequest.yaml
    UnSubscribeRequest: 
      $ref: schema/UnSubscribeRequest.yaml
    UnSubscribeResponse: 
      $ref: schema/UnSubscribeResponse.yaml
    UnSubscribeStatusReasonCode: 
      $ref: schema/UnSubscribeStatusReasonCode.yaml           
    NotifyEventRequest: 
      $ref: schema/NotifyEventRequest.yaml    
    EncryptedMessage: 
      $ref: ../common/schema/EncryptedMessage.yaml
    Error: 
      $ref: ../common/schema/Error.yaml
    FileInfo: 
      $ref: ../common/schema/FileInfo.yaml
    MsgCallbackHeader_V1.0.0: 
      $ref: ../common/schema/MsgCallbackHeader_V1.0.0.yaml
    MsgHeader_V1.0.0: 
      $ref: ../common/schema/MsgHeader_V1.0.0.yaml
    MsgHeaderStatusReasonCode: 
      $ref: ../common/schema/MsgHeaderStatusReasonCode.yaml
    MsgSignature: 
      $ref:  ../common/schema/MsgSignature.yaml

  responses: 
    HttpErrorResponse:
      $ref: ../common/response/HttpErrorResponse.yaml       
    Response:
      $ref: ../common/response/Response.yaml    
  securitySchemes:
    Authorization:
      $ref: ../common/security/Authorization.yaml
